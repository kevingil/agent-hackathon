from pydantic import BaseModel, Field
from typing import Any, Literal, List


class DecideResposnse(BaseModel):
    thoughts: list[str] = Field(description="List of thoughts")
    selected_tools: list[dict] = Field(description="List of selected tools")


class CalledToolHistoryResponse(BaseModel):
    question: str = Field(description="The question to answer")
    tools: List[dict] = Field(description="List of tools")
    called_tools: List[dict] = Field(description="List of called tools")


class PlannerTask(BaseModel):
    """Represents a single task generated by the Planner."""

    id: int = Field(description="Sequential ID for the task.")
    description: str = Field(
        description="Clear description of the task to be executed."
    )
    assigned_agent: str = Field(description="The agent responsible for the task")
    status: (
        Any
        | Literal[
            "input_required",
            "completed",
            "error",
            "pending",
            "incomplete",
            "todo",
            "not_started",
        ]
        | None
    ) = Field(description="Status of the task", default="input_required")


class Plan(BaseModel):
    """Output schema for the Planner Agent."""

    original_query: str = Field(description="The original user query for context.")
    description: str = Field(description="Clear description of the .")
    tasks: list[PlannerTask] = Field(
        description="A list of tasks to be executed sequentially."
    )


class ResponseFormat(BaseModel):
    """Respond to the user in this format."""

    status: Literal["input_required", "completed", "error"] = "input_required"
    question: str = Field(
        description="Input needed from the user to generate the code search plan"
    )
    content: Plan = Field(
        description="List of tasks when the code search plan is generated"
    )


class ServerConfig(BaseModel):
    """Server Confgiguration."""

    host: str
    port: int
    transport: str
    url: str
